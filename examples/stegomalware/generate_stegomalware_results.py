from utils.StegoPy import encode_img, decode_img, encode_msg, decode_msg
from utils.utils import\
    load_vae_suds,\
    load_data

from utils.vae import CNN_VAE
from PIL import Image

import argparse
import matplotlib.pyplot as plt
import numpy as np
import random
import os
import copy
from tqdm import tqdm
import warnings
import pandas as pd
import torch

warnings.filterwarnings("ignore")
np.random.seed(4)
random.seed(4)

##################
# VARS
##################
IMG_PATH = "image_folder/"
STEGO_FOLDER = "stegomalware"
SANI_FOLDER = "stego_sani"

def get_args():
    """
    Get command line arguments
    """
    parser = argparse.ArgumentParser(description='Argument parser for ddh, udh, and lsb')
    
    parser.add_argument('--create_imgs', action='store_true', help='Create stegomalware and sanitized images.')
    parser.add_argument('--evaluate', action='store_true', help='Evaluate the stegexpose results.')
    
    args = parser.parse_args()
    return args

def make_folder(path):
    """
    Creates a folder at path if one does not already exist.
    
    Parameters
    ---------
    path : str
        path of intended folder
    """
    if os.path.exists(path) == 0:
        os.mkdir(path)
        
def save_img(img, path):
    """
    Saves an image to the indicated path.
    
    Parameters
    ----------
    img : tensor
        an image tensor
    path : str
        path to save the image
    """
    if img.shape[0] == 1:
        img = img[0]
    elif img.shape[0] == 3:
        img = img.permute(1, 2, 0)
    
    transform = 255 if img.max() <= 1 else 1
    img_data = np.array(img*transform).astype(np.uint8)
    Image.fromarray(img_data).save(path+".png")
    return

def save_images(imgs, folder):
    """
    Saves a tensor of images into a specified folder by calling save_img
    
    Parameters
    ----------
    imgs : tensor
        a tensor of tensor images
    folder : str
        the overall directory of where to save the images
    """
    for i in range(len(imgs)):
        save_img(imgs[i], folder+"/"+str(i))
        
def create_images():
    """
    Create stegomalware and sanitized image folders.
    """
    #
    # Load Models
    #
    train_loader, test_loader = load_data("mnist")
    make_folder(IMG_PATH)
    make_folder(IMG_PATH+STEGO_FOLDER)
    make_folder(IMG_PATH+SANI_FOLDER)
    vae_model = load_vae_suds()
    #
    # Getpowershell scripts
    #
    scripts = ['PowerShell/'+s for s in os.listdir("PowerShell/") if '.ps1' in s]
    #
    # Create Stegomalware
    #
    bs = 128
    ps_len = len(scripts)
    for i, data in enumerate(tqdm(test_loader), 0):
        covers, labels = data
        covers = covers.clone().detach()
        # save images
        for k in range(covers.shape[0]):
            s_idx = np.random.randint(ps_len)
            text_file = open(scripts[s_idx], "r")
            data = text_file.read()
            text_file.close()
            container = encode_msg(covers[k]*255, data)
            save_img(container, IMG_PATH+STEGO_FOLDER+"/"+str(i*bs + k))
            #sanitize it
            with torch.no_grad():
                sani, _, _ = vae_model.forward_train((container/255).unsqueeze(0))
            save_img(sani[0], IMG_PATH+SANI_FOLDER+"/"+str(i*bs + k))
            
def evaluate_stegexpose():
    """
    Use dataframes created by stegexpose to evaluate results.
    """
    df1 = pd.read_csv('results/stegomalware_results.csv')
    df2 = pd.read_csv('results/sanitized_results.csv')
    print("Percentage Flagged Pre: ", ((df1['Above stego threshold?'] == True).sum()/10000)*100, "%")
    print("Percentage Flagged Post: ", ((df2['Above stego threshold?'] == True).sum()/10000)*100, "%")
    
if __name__ == "__main__":
    args = get_args()
    # if nothing is defined by the user, do both
    if args.create_imgs == False and args.evaluate == False:
        args.create_imgs = True
        args.evaluate = True
    # create images
    if args.create_imgs:
        create_images()
    # print evaluation
    if args.evaluate:
        evaluate_stegexpose()